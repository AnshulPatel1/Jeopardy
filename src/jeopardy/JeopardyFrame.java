/** Jeopardy Frame for this game where most of the game is coded
 * JeopardyFrame.java
 * ICS4U1
 * @since 06/06/2015
 * @author Anshul Patel
 */

package jeopardy;

//Importing the required libraries needed for this class to run
import java.awt.Color;
import javax.swing.JOptionPane;

public class JeopardyFrame extends javax.swing.JFrame {

    Game game = new Game(); //Creating a new game object
    
    /** Creates new form JeopardyFrame
     */
    public JeopardyFrame() {
        initComponents();
        getContentPane().setBackground(Color.CYAN);//Setting the colour of the background, CYAN
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Quit = new javax.swing.JButton();
        Restart = new javax.swing.JButton();
        Player1 = new javax.swing.JLabel();
        historyButton3 = new javax.swing.JButton();
        historyButton4 = new javax.swing.JButton();
        historyButton1 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        historyButton2 = new javax.swing.JButton();
        historyButton5 = new javax.swing.JButton();
        scienceButton1 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        scienceButton4 = new javax.swing.JButton();
        scienceButton2 = new javax.swing.JButton();
        scienceButton3 = new javax.swing.JButton();
        scienceButton5 = new javax.swing.JButton();
        sportsButton1 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        sportsButton2 = new javax.swing.JButton();
        History = new javax.swing.JLabel();
        Science = new javax.swing.JLabel();
        Sports = new javax.swing.JLabel();
        Entertainment = new javax.swing.JLabel();
        Player2 = new javax.swing.JLabel();
        Player3 = new javax.swing.JLabel();
        sportsButton4 = new javax.swing.JButton();
        sportsButton3 = new javax.swing.JButton();
        sportsButton5 = new javax.swing.JButton();
        entertainmentButton5 = new javax.swing.JButton();
        entertainmentButton4 = new javax.swing.JButton();
        entertainmentButton3 = new javax.swing.JButton();
        entertainmentButton1 = new javax.swing.JButton();
        entertainmentButton2 = new javax.swing.JButton();
        scorePlayer1 = new javax.swing.JLabel();
        scorePlayer2 = new javax.swing.JLabel();
        scorePlayer3 = new javax.swing.JLabel();
        currentPlayer = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Quit.setBackground(new java.awt.Color(0, 204, 0));
        Quit.setText("Quit ");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });

        Restart.setBackground(new java.awt.Color(0, 204, 0));
        Restart.setText("Restart");
        Restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartActionPerformed(evt);
            }
        });

        Player1.setText("Player 1 :");

        historyButton3.setBackground(new java.awt.Color(255, 255, 153));
        historyButton3.setText("600");
        historyButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButton3ActionPerformed(evt);
            }
        });

        historyButton4.setBackground(new java.awt.Color(255, 255, 153));
        historyButton4.setText("800");
        historyButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButton4ActionPerformed(evt);
            }
        });

        historyButton1.setBackground(new java.awt.Color(255, 255, 153));
        historyButton1.setText("200");
        historyButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyButton1MouseClicked(evt);
            }
        });
        historyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButton1ActionPerformed(evt);
            }
        });

        jButton16.setText("jButton1");

        historyButton2.setBackground(new java.awt.Color(255, 255, 153));
        historyButton2.setText("400");
        historyButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButton2ActionPerformed(evt);
            }
        });

        historyButton5.setBackground(new java.awt.Color(255, 255, 153));
        historyButton5.setText("1000");
        historyButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButton5ActionPerformed(evt);
            }
        });

        scienceButton1.setBackground(new java.awt.Color(255, 255, 153));
        scienceButton1.setText("200");
        scienceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scienceButton1ActionPerformed(evt);
            }
        });

        jButton10.setText("jButton1");

        scienceButton4.setBackground(new java.awt.Color(255, 255, 153));
        scienceButton4.setText("800");
        scienceButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scienceButton4ActionPerformed(evt);
            }
        });

        scienceButton2.setBackground(new java.awt.Color(255, 255, 153));
        scienceButton2.setText("400");
        scienceButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scienceButton2ActionPerformed(evt);
            }
        });

        scienceButton3.setBackground(new java.awt.Color(255, 255, 153));
        scienceButton3.setText("600");
        scienceButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scienceButton3ActionPerformed(evt);
            }
        });

        scienceButton5.setBackground(new java.awt.Color(255, 255, 153));
        scienceButton5.setText("1000");
        scienceButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scienceButton5ActionPerformed(evt);
            }
        });

        sportsButton1.setBackground(new java.awt.Color(255, 255, 153));
        sportsButton1.setText("200");
        sportsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsButton1ActionPerformed(evt);
            }
        });

        jButton15.setText("jButton1");

        sportsButton2.setBackground(new java.awt.Color(255, 255, 153));
        sportsButton2.setText("400");
        sportsButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsButton2ActionPerformed(evt);
            }
        });

        History.setText("History");

        Science.setText("Science");

        Sports.setText("Sports");

        Entertainment.setText("Entertainment");

        Player2.setText("Player 2 :");

        Player3.setText("Player 3 :");

        sportsButton4.setBackground(new java.awt.Color(255, 255, 153));
        sportsButton4.setText("800");
        sportsButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsButton4ActionPerformed(evt);
            }
        });

        sportsButton3.setBackground(new java.awt.Color(255, 255, 153));
        sportsButton3.setText("600");
        sportsButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsButton3ActionPerformed(evt);
            }
        });

        sportsButton5.setBackground(new java.awt.Color(255, 255, 153));
        sportsButton5.setText("1000");
        sportsButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsButton5ActionPerformed(evt);
            }
        });

        entertainmentButton5.setBackground(new java.awt.Color(255, 255, 153));
        entertainmentButton5.setText("1000");
        entertainmentButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentButton5ActionPerformed(evt);
            }
        });

        entertainmentButton4.setBackground(new java.awt.Color(255, 255, 153));
        entertainmentButton4.setText("800");
        entertainmentButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentButton4ActionPerformed(evt);
            }
        });

        entertainmentButton3.setBackground(new java.awt.Color(255, 255, 153));
        entertainmentButton3.setText("600");
        entertainmentButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentButton3ActionPerformed(evt);
            }
        });

        entertainmentButton1.setBackground(new java.awt.Color(255, 255, 153));
        entertainmentButton1.setText("200");
        entertainmentButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentButton1ActionPerformed(evt);
            }
        });

        entertainmentButton2.setBackground(new java.awt.Color(255, 255, 153));
        entertainmentButton2.setText("400");
        entertainmentButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentButton2ActionPerformed(evt);
            }
        });

        scorePlayer1.setText("0");

        scorePlayer2.setText("0");

        scorePlayer3.setText("0");

        currentPlayer.setText("Player 1");

        jLabel1.setText("FOR YOUR ANSWERS DO NOT TYPE \"WHAT IS\"");

        jLabel2.setText("CAPITALS MATTER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(historyButton1, 0, 0, Short.MAX_VALUE)
                                .addComponent(historyButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(historyButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(historyButton4, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                                .addComponent(historyButton5, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(History))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Player1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scorePlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(Player2))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(scienceButton1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                        .addComponent(scienceButton5, 0, 0, Short.MAX_VALUE)
                                        .addComponent(scienceButton4, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                        .addComponent(scienceButton3, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                        .addComponent(scienceButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sportsButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sportsButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sportsButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sportsButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sportsButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(scorePlayer2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(120, 120, 120))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(entertainmentButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(entertainmentButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(entertainmentButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(entertainmentButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(entertainmentButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Entertainment, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(21, 21, 21))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Player3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scorePlayer3)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(Science)
                                .addGap(89, 89, 89)
                                .addComponent(Sports))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Quit, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Restart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                                .addComponent(currentPlayer)
                                .addGap(100, 100, 100))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(137, 137, 137)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(104, 104, 104))
            .addGroup(layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Quit)
                            .addComponent(Restart)
                            .addComponent(currentPlayer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(History)
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Science)
                                    .addComponent(Sports))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Entertainment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(historyButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(historyButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(historyButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(historyButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(historyButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sportsButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13)
                                        .addComponent(sportsButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sportsButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sportsButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sportsButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(entertainmentButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13)
                                        .addComponent(entertainmentButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(entertainmentButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(entertainmentButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(entertainmentButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(57, 57, 57))
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Player1)
                            .addComponent(Player2)
                            .addComponent(Player3)
                            .addComponent(scorePlayer1)
                            .addComponent(scorePlayer2)
                            .addComponent(scorePlayer3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scienceButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scienceButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scienceButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scienceButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scienceButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(214, 214, 214)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** The action performed when the quit button is pressed
     * @param evt - the action detected by a java library 
     */
    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        System.exit(0);//Turns the run screen off when the quit button is pressed
    }//GEN-LAST:event_QuitActionPerformed

    /** The action performed when the restart button is pressed
     * @param evt - the action detected by a java library 
     */
    private void RestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartActionPerformed
        
        //Resetting the screen when the restart button is pressed
        historyButton1.setEnabled(true);
        historyButton2.setEnabled(true);
        historyButton3.setEnabled(true);
        historyButton4.setEnabled(true);
        historyButton5.setEnabled(true);
        scienceButton1.setEnabled(true);
        scienceButton2.setEnabled(true);
        scienceButton3.setEnabled(true);
        scienceButton4.setEnabled(true);
        scienceButton5.setEnabled(true);
        sportsButton1.setEnabled(true);
        sportsButton2.setEnabled(true);
        sportsButton3.setEnabled(true);
        sportsButton4.setEnabled(true);
        sportsButton5.setEnabled(true);
        entertainmentButton1.setEnabled(true);
        entertainmentButton2.setEnabled(true);
        entertainmentButton3.setEnabled(true);
        entertainmentButton4.setEnabled(true);
        entertainmentButton5.setEnabled(true);
        game.setTurn(1);
        currentPlayer.setText("Player 1");
        game.setScoreP1(0);
        game.setScoreP2(0);
        game.setScoreP3(0);
        scorePlayer1.setText(String.valueOf(game.getScoreP1()));
        scorePlayer2.setText(String.valueOf(game.getScoreP2()));
        scorePlayer3.setText(String.valueOf(game.getScoreP3()));
        
    }//GEN-LAST:event_RestartActionPerformed

    //Ignore this method, I could not get rid of it
    private void historyButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyButton1MouseClicked
        
    }//GEN-LAST:event_historyButton1MouseClicked

    /** The action performed when the first history button is pressed
     * @param evt - the action detected by a java library 
     */
    private void historyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButton1ActionPerformed
       
        //Outputs a JPanel which shows the question and asks the user for an answer
        String historyQuestion1 = JOptionPane.showInputDialog(game.getQuestion(0,0)); 
        
        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (historyQuestion1.equalsIgnoreCase(game.getAnswer(0,0))){ 
                                                                     
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(0,0) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(0,0));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(0,0) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(0,0));
        
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(0,0) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(0,0));
                
            }
            
        } else { //If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
                
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(0,0)));
            game.setScoreP1(game.getScoreP1() - game.getScore(0,0));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(0,0)));
                game.setScoreP2(game.getScoreP2() - game.getScore(0,0));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(0,0)));
                game.setScoreP3(game.getScoreP3() - game.getScore(0,0));
                game.setTurn(1);
            }
            
        }
     
        //If the user answers the question, disables the button so that it cannot be pressed again
        if (!(historyQuestion1.equals(""))){
            historyButton1.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen 
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_historyButton1ActionPerformed

    /** The action performed when the second history button is pressed
     * @param evt - the action detected by a java library 
     */
    private void historyButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButton2ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String historyQuestion2 = JOptionPane.showInputDialog(game.getQuestion(1,0));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (historyQuestion2.equalsIgnoreCase(game.getAnswer(1,0))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(1,0) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(1,0));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(1,0) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(1,0));
              
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(1,0) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(1,0));
               
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(1,0)));
            game.setScoreP1(game.getScoreP1() - game.getScore(1,0));    
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(1,0)));
                game.setScoreP2(game.getScoreP2() - game.getScore(1,0));    
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(1,0)));
                game.setScoreP3(game.getScoreP3() - game.getScore(1,0));    
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again 
        if (!(historyQuestion2.equals(""))){
            historyButton2.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_historyButton2ActionPerformed

    /** The action performed when the third history button is pressed
     * @param evt - the action detected by a java library 
     */
    private void historyButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButton3ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String historyQuestion3 = JOptionPane.showInputDialog(game.getQuestion(2,0));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (historyQuestion3.equalsIgnoreCase(game.getAnswer(2,0))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(2,0) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(2,0));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(2,0) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(2,0));
               
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(2,0) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(2,0));
               
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(2,0)));
            game.setScoreP1(game.getScoreP1() - game.getScore(2,0));    
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(2,0)));
                game.setScoreP2(game.getScoreP2() - game.getScore(2,0));    
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(2,0)));
                game.setScoreP3(game.getScoreP3() - game.getScore(2,0));    
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again 
        if (!(historyQuestion3.equals(""))) {
            historyButton3.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_historyButton3ActionPerformed

    /** The action performed when the fourth history button is pressed
     * @param evt - the action detected by a java library 
     */
    private void historyButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButton4ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String historyQuestion4 = JOptionPane.showInputDialog(game.getQuestion(3,0));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (historyQuestion4.equalsIgnoreCase(game.getAnswer(3,0))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(3,0) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(3,0));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(3,0) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(3,0));
              
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(3,0) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(3,0));
              
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(3,0)));
            game.setScoreP1(game.getScoreP1() - game.getScore(3,0));    
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(3,0)));
                game.setScoreP2(game.getScoreP2() - game.getScore(3,0));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(3,0)));
                game.setScoreP3(game.getScoreP3() - game.getScore(3,0));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(historyQuestion4.equals(""))){
            historyButton4.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_historyButton4ActionPerformed

    /** The action performed when the fifth history button is pressed
     * @param evt - the action detected by a java library 
     */
    private void historyButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButton5ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String historyQuestion5 = JOptionPane.showInputDialog(game.getQuestion(4,0));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (historyQuestion5.equalsIgnoreCase(game.getAnswer(4,0))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(4,0) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(4,0));
           
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(4,0) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(4,0));
               
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(4,0) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(4,0));
              
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(4,0)));
            game.setScoreP1(game.getScoreP1() - game.getScore(4,0));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(4,0)));
                game.setScoreP2(game.getScoreP2() - game.getScore(4,0));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(4,0)));
                game.setScoreP3(game.getScoreP3() - game.getScore(4,0));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(historyQuestion5.equals(""))){
            historyButton5.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_historyButton5ActionPerformed

    /** The action performed when the first science button is pressed
     * @param evt - the action detected by a java library 
     */
    private void scienceButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scienceButton1ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String scienceQuestion1 = JOptionPane.showInputDialog(game.getQuestion(0,1));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (scienceQuestion1.equalsIgnoreCase(game.getAnswer(0,1))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(0,1) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(0,1));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(0,1) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(0,1));
               
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(0,1) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(0,1));
               
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(0,1)));
            game.setScoreP1(game.getScoreP1() - game.getScore(0,1));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(0,1)));
                game.setScoreP2(game.getScoreP2() - game.getScore(0,1));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(0,1)));
                game.setScoreP3(game.getScoreP3() - game.getScore(0,1));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(scienceQuestion1.equals(""))){
            scienceButton1.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_scienceButton1ActionPerformed

    /** The action performed when the second science button is pressed
     * @param evt - the action detected by a java library 
     */
    private void scienceButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scienceButton2ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String scienceQuestion2 = JOptionPane.showInputDialog(game.getQuestion(1,1));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (scienceQuestion2.equalsIgnoreCase(game.getAnswer(1,1))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(1,1) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(1,1));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(1,1) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(1,1));
               
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(1,1)));
            
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(1,1)));
            game.setScoreP1(game.getScoreP1() - game.getScore(1,1));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(1,1)));
                game.setScoreP2(game.getScoreP2() - game.getScore(1,1));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(1,1)));
                game.setScoreP3(game.getScoreP3() - game.getScore(1,1));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(scienceQuestion2.equals(""))){
            scienceButton2.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_scienceButton2ActionPerformed

    /** The action performed when the third science button is pressed
     * @param evt - the action detected by a java library 
     */
    private void scienceButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scienceButton3ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String scienceQuestion3 = JOptionPane.showInputDialog(game.getQuestion(2,1));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (scienceQuestion3.equalsIgnoreCase(game.getAnswer(2,1))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(2,1) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(2,1));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(2,1) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(2,1));
            
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(2,1) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(2,1));
                
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(2,1)));
            game.setScoreP1(game.getScoreP1() - game.getScore(2,1));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(2,1)));
                game.setScoreP2(game.getScoreP2() - game.getScore(2,1));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(2,1)));
                game.setScoreP3(game.getScoreP3() - game.getScore(2,1));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(scienceQuestion3.equals(""))){
            scienceButton3.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_scienceButton3ActionPerformed

    /** The action performed when the fourth science button is pressed
     * @param evt - the action detected by a java library 
     */
    private void scienceButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scienceButton4ActionPerformed
       
        //Outputs a JPanel which shows the question and asks the user for an answer
        String scienceQuestion4 = JOptionPane.showInputDialog(game.getQuestion(3,1));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (scienceQuestion4.equalsIgnoreCase(game.getAnswer(3,1))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(3,1) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(3,1));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(3,1) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(3,1));
                
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(3,1) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(3,1));
             
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(3,1)));
            game.setScoreP1(game.getScoreP1() - game.getScore(3,1));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(3,1)));
                game.setScoreP2(game.getScoreP2() - game.getScore(3,1));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(3,1)));
                game.setScoreP3(game.getScoreP3() - game.getScore(3,1));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(scienceQuestion4.equals(""))){
            scienceButton4.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_scienceButton4ActionPerformed

    /** The action performed when the fifth science button is pressed
     * @param evt - the action detected by a java library 
     */
    private void scienceButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scienceButton5ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String scienceQuestion5 = JOptionPane.showInputDialog(game.getQuestion(4,1));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (scienceQuestion5.equalsIgnoreCase(game.getAnswer(4,1))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(4,1) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(4,1));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(4,1) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(4,1));
                
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(4,1) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(4,1));
               
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(4,1)));
            game.setScoreP1(game.getScoreP1() - game.getScore(4,1));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(4,1)));
                game.setScoreP2(game.getScoreP2() - game.getScore(4,1));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(4,1)));
                game.setScoreP3(game.getScoreP3() - game.getScore(4,1));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(scienceQuestion5.equals(""))){
            scienceButton5.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_scienceButton5ActionPerformed

    /** The action performed when the first sports button is pressed
     * @param evt - the action detected by a java library 
     */
    private void sportsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsButton1ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String sportsQuestion1 = JOptionPane.showInputDialog(game.getQuestion(0,2));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (sportsQuestion1.equalsIgnoreCase(game.getAnswer(0,2))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(0,2) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(0,2));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(0,2) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(0,2));
               
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(0,2) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(0,2));
               
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(0,2)));
            game.setScoreP1(game.getScoreP1() - game.getScore(0,2));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(0,2)));
                game.setScoreP2(game.getScoreP2() - game.getScore(0,2));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(0,2)));
                game.setScoreP3(game.getScoreP3() - game.getScore(0,2));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(sportsQuestion1.equals(""))){
            sportsButton1.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_sportsButton1ActionPerformed

    /** The action performed when the second sports button is pressed
     * @param evt - the action detected by a java library 
     */
    private void sportsButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsButton2ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String sportsQuestion2 = JOptionPane.showInputDialog(game.getQuestion(1,2));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (sportsQuestion2.equalsIgnoreCase(game.getAnswer(1,2))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(1,2) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(1,2));
          
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(1,2) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(1,2));
               
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(1,2) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(1,2));
              
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(1,2)));
            game.setScoreP1(game.getScoreP1() - game.getScore(1,2));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(1,2)));
                game.setScoreP2(game.getScoreP2() - game.getScore(1,2));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(1,2)));
                game.setScoreP3(game.getScoreP3() - game.getScore(1,2));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(sportsQuestion2.equals(""))){
            sportsButton2.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_sportsButton2ActionPerformed

    /** The action performed when the third sports button is pressed
     * @param evt - the action detected by a java library 
     */
    private void sportsButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsButton3ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String sportsQuestion3 = JOptionPane.showInputDialog(game.getQuestion(2,2));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (sportsQuestion3.equalsIgnoreCase(game.getAnswer(2,2))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(2,2) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(2,2));
          
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(2,2) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(2,2));
              
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(2,2) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(2,2));
              
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(2,2)));
            game.setScoreP1(game.getScoreP1() - game.getScore(2,2));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(2,2)));
                game.setScoreP2(game.getScoreP2() - game.getScore(2,2));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(2,2)));
                game.setScoreP3(game.getScoreP3() - game.getScore(2,2));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(sportsQuestion3.equals(""))){
            sportsButton3.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_sportsButton3ActionPerformed

    /** The action performed when the fourth sports button is pressed
     * @param evt - the action detected by a java library 
     */
    private void sportsButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsButton4ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String sportsQuestion4 = JOptionPane.showInputDialog(game.getQuestion(3,2));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (sportsQuestion4.equalsIgnoreCase(game.getAnswer(3,2))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(3,2) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(3,2));
           
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(3,2) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(3,2));
             
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(3,2) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(3,2));
              
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(3,2)));
            game.setScoreP1(game.getScoreP1() - game.getScore(3,2));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(3,2)));
                game.setScoreP2(game.getScoreP2() - game.getScore(3,2));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(3,2)));
                game.setScoreP3(game.getScoreP3() - game.getScore(3,2));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(sportsQuestion4.equals(""))){
            sportsButton4.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_sportsButton4ActionPerformed

    /** The action performed when the fifth sports button is pressed
     * @param evt - the action detected by a java library 
     */
    private void sportsButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsButton5ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String sportsQuestion5 = JOptionPane.showInputDialog(game.getQuestion(4,2));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (sportsQuestion5.equalsIgnoreCase(game.getAnswer(4,2))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(4,2) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(4,2));
           
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(4,2) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(4,2));
             
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(4,2) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(4,2));
               
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(4,2)));
            game.setScoreP1(game.getScoreP1() - game.getScore(4,2));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(4,2)));
                game.setScoreP2(game.getScoreP2() - game.getScore(4,2));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(4,2)));
                game.setScoreP3(game.getScoreP3() - game.getScore(4,2));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(sportsQuestion5.equals(""))){
            sportsButton5.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_sportsButton5ActionPerformed

    /** The action performed when the first entertainment button is pressed
     * @param evt - the action detected by a java library 
     */
    private void entertainmentButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentButton1ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String entertainmentQuestion1 = JOptionPane.showInputDialog(game.getQuestion(0,3));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (entertainmentQuestion1.equalsIgnoreCase(game.getAnswer(0,3))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(0,3) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(0,3));
           
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(0,3) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(0,3));
                
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(0,3) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(0,3));
                
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(0,3)));
            game.setScoreP1(game.getScoreP1() - game.getScore(0,3));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(0,3)));
                game.setScoreP2(game.getScoreP2() - game.getScore(0,3));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(0,3)));
                game.setScoreP3(game.getScoreP3() - game.getScore(0,3));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(entertainmentQuestion1.equals(""))){
            entertainmentButton1.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_entertainmentButton1ActionPerformed

    /** The action performed when the second entertainment button is pressed
     * @param evt - the action detected by a java library 
     */
    private void entertainmentButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentButton2ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String entertainmentQuestion2 = JOptionPane.showInputDialog(game.getQuestion(1,3));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (entertainmentQuestion2.equalsIgnoreCase(game.getAnswer(1,3))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(1,3) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(1,3));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(1,3) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(1,3));
                
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(1,3) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(1,3));
              
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(1,3)));
            game.setScoreP1(game.getScoreP1() - game.getScore(1,3));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(1,3)));
                game.setScoreP2(game.getScoreP2() - game.getScore(1,3));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(1,3)));
                game.setScoreP3(game.getScoreP3() - game.getScore(1,3));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(entertainmentQuestion2.equals(""))){
            entertainmentButton2.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_entertainmentButton2ActionPerformed

    /** The action performed when the third entertainment button is pressed
     * @param evt - the action detected by a java library 
     */
    private void entertainmentButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentButton3ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String entertainmentQuestion3 = JOptionPane.showInputDialog(game.getQuestion(2,3));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (entertainmentQuestion3.equalsIgnoreCase(game.getAnswer(2,3))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(2,3) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(2,3));
         
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(2,3) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(2,3));
        
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(2,3) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(2,3));
            
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(2,3)));
            game.setScoreP1(game.getScoreP1() - game.getScore(2,3));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(2,3)));
                game.setScoreP2(game.getScoreP2() - game.getScore(2,3));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(2,3)));
                game.setScoreP3(game.getScoreP3() - game.getScore(2,3));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(entertainmentQuestion3.equals(""))){
            entertainmentButton3.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_entertainmentButton3ActionPerformed

    /** The action performed when the fourth entertainment button is pressed
     * @param evt - the action detected by a java library 
     */
    private void entertainmentButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentButton4ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String entertainmentQuestion4 = JOptionPane.showInputDialog(game.getQuestion(3,3));

        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (entertainmentQuestion4.equalsIgnoreCase(game.getAnswer(3,3))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(3,3) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(3,3));
     
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(3,3) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(3,3));
              
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(3,3) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(3,3));
          
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(3,3)));
            game.setScoreP1(game.getScoreP1() - game.getScore(3,3));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(3,3)));
                game.setScoreP2(game.getScoreP2() - game.getScore(3,3));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(3,3)));
                game.setScoreP3(game.getScoreP3() - game.getScore(3,3));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(entertainmentQuestion4.equals(""))){
            entertainmentButton4.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_entertainmentButton4ActionPerformed

    /** The action performed when the fifth entertainment button is pressed
     * @param evt - the action detected by a java library 
     */
    private void entertainmentButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentButton5ActionPerformed
        
        //Outputs a JPanel which shows the question and asks the user for an answer
        String entertainmentQuestion5 = JOptionPane.showInputDialog(game.getQuestion(4,3));
        
        //If they get the answer right, updates the score (and outputs it to label) according to what players turn it was
        if (entertainmentQuestion5.equalsIgnoreCase(game.getAnswer(4,3))){
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScore(4,3) + game.getScoreP1()));
            game.setScoreP1(game.getScoreP1() + game.getScore(4,3));
            
            } else if (game.getTurn() == 2){
                scorePlayer2.setText(String.valueOf(game.getScore(4,3) + game.getScoreP2()));
                game.setScoreP2(game.getScoreP2() + game.getScore(4,3));
  
            } else {
                scorePlayer3.setText(String.valueOf(game.getScore(4,3) + game.getScoreP3()));
                game.setScoreP3(game.getScoreP3() + game.getScore(4,3));
            
            }
            
        } else {//If they get the answer wrong, updates the score and takes away points according to whose turn it was and changes turn
            
            if (game.getTurn() == 1){
            scorePlayer1.setText(String.valueOf(game.getScoreP1() - game.getScore(4,3)));
            game.setScoreP1(game.getScoreP1() - game.getScore(4,3));
            game.setTurn(2);
            } else if (game.getTurn() == 2) {
                scorePlayer2.setText(String.valueOf(game.getScoreP2() - game.getScore(4,3)));
                game.setScoreP2(game.getScoreP2() - game.getScore(4,3));
                game.setTurn(3);
            } else {
                scorePlayer3.setText(String.valueOf(game.getScoreP3() - game.getScore(4,3)));
                game.setScoreP3(game.getScoreP3() - game.getScore(4,3));
                game.setTurn(1);
            }
            
        }
        
        //If the user enters something, disables the button so it cannot be pressed again
        if (!(entertainmentQuestion5.equals(""))){
            entertainmentButton5.setEnabled(false);
        }
        
        //Outputs whose turn it is on the run screen
        if (game.getTurn() == 1){
            currentPlayer.setText("Player 1");
        } else if (game.getTurn() == 2){
            currentPlayer.setText("Player 2");          
        } else {
            currentPlayer.setText("Player 3");
        }
    }//GEN-LAST:event_entertainmentButton5ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JeopardyFrame().setVisible(true);
                
        
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Entertainment;
    private javax.swing.JLabel History;
    private javax.swing.JLabel Player1;
    private javax.swing.JLabel Player2;
    private javax.swing.JLabel Player3;
    private javax.swing.JButton Quit;
    private javax.swing.JButton Restart;
    private javax.swing.JLabel Science;
    private javax.swing.JLabel Sports;
    private javax.swing.JLabel currentPlayer;
    private javax.swing.JButton entertainmentButton1;
    private javax.swing.JButton entertainmentButton2;
    private javax.swing.JButton entertainmentButton3;
    private javax.swing.JButton entertainmentButton4;
    private javax.swing.JButton entertainmentButton5;
    private javax.swing.JButton historyButton1;
    private javax.swing.JButton historyButton2;
    private javax.swing.JButton historyButton3;
    private javax.swing.JButton historyButton4;
    private javax.swing.JButton historyButton5;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton scienceButton1;
    private javax.swing.JButton scienceButton2;
    private javax.swing.JButton scienceButton3;
    private javax.swing.JButton scienceButton4;
    private javax.swing.JButton scienceButton5;
    private javax.swing.JLabel scorePlayer1;
    private javax.swing.JLabel scorePlayer2;
    private javax.swing.JLabel scorePlayer3;
    private javax.swing.JButton sportsButton1;
    private javax.swing.JButton sportsButton2;
    private javax.swing.JButton sportsButton3;
    private javax.swing.JButton sportsButton4;
    private javax.swing.JButton sportsButton5;
    // End of variables declaration//GEN-END:variables

}
